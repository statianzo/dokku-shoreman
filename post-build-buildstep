#!/bin/bash
APP="$1"; IMAGE="dokku/$APP"

read -d '' runner <<'EOF'
#!/bin/bash
# **shoreman** is an implementation of the **Procfile** format. Inspired by
# the original [foreman](http://ddollar.github.com/foreman/) tool for ruby,
# as well as [norman](https://github.com/josh/norman) for node.js.

# This version is altered for use within dokku
# .env parsing has been removed
# children are killed using their parent ID

#
# copied/pasted some code from dokku-alt-shoreman so that I can get more logging to STDOUT
# 12 factors, and all.
#

set -e
export HOME=/app
for file in \$HOME/.profile.d/*; do source \$file; done
hash -r
cd \$HOME

if [ -n "$APP_NAME" ]; then
  app=" ${APP_NAME} |"
else
  app=""
fi

log() {
        while read data
        do
                prefix="$(date --iso-8601=seconds)$app ${1}"
                echo -e "$prefix | $data"
        done
}

start_command() {
        bash -c "$1" 2>&1 | log "$2" &
}

case "\$(basename \$0)" in
  start)
    while read line || [ -n "\$line" ]; do
      name=\${line%%:*}
      command=\${line#*: }
      start_command "$command" "${name}"
      echo "'${command}' started with name ${name}" | log "${name}"
    done < "Procfile"
    
    onexit() {
      echo SIGINT received
      echo sending SIGTERM to all processes
      children=\$(ps --ppid=\$\$ -o pid='')
      kill -- \$children &> /dev/null
      sleep 1
    }
    trap onexit SIGTERM SIGINT EXIT
    
    wait
    ;;
  *)
    "\$@"
    ;;
esac
EOF

set -e

# Check for Procfile
id=$(docker run -d $IMAGE test -f app/Procfile)
if [ $(docker wait $id) -ne 0 ]; then
  exit 0
fi

echo "-----> Injecting Shoreman ..."

id=$(echo "$runner" | docker run -i -a stdin $IMAGE /bin/bash -c "cat > /start")
test $(docker wait $id) -eq 0
docker commit $id $IMAGE > /dev/null
